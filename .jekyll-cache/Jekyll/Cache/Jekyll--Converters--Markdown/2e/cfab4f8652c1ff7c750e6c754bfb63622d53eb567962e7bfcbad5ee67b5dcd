I"Z<ul id="markdown-toc">
  <li><a href="#hurst-exponent" id="markdown-toc-hurst-exponent">Hurst Exponent</a></li>
  <li><a href="#environment" id="markdown-toc-environment">Environment</a></li>
  <li><a href="#user-guide" id="markdown-toc-user-guide">User Guide</a></li>
  <li><a href="#tips" id="markdown-toc-tips">Tips</a></li>
</ul>

<h1 id="hurst-exponent">Hurst Exponent</h1>
<p>Calculates the Hurst exponent of a time series based on Rescaled range (R/S) analysis.<br />
Reference: https://en.wikipedia.org/wiki/Hurst_exponent</p>
<h1 id="environment">Environment</h1>
<p>Python 3.6.2 AMD64<br />
numpy (1.13.3+mkl)<br />
pandas (0.20.3)</p>
<h1 id="user-guide">User Guide</h1>
<p>import Hurst<br />
ts = list(range(50))<br />
hurst = Hurst.hurst(ts)</p>
<h1 id="tips">Tips</h1>
<p>The input ts has to be object list(n_samples,) or np.array(n_samples,).</p>

<p>-<em>- coding: utf-8 -</em>-
 Reference: https://en.wikipedia.org/wiki/Hurst_exponent
 python 3.6.2 AMD64
 2018/4/19</p>

<p>Calculate Hurst exponent based on Rescaled range (R/S) analysis</p>

<p>How to use (example):</p>

<p>import Hurst</p>

<p>ts = list(range(50))</p>

<p>hurst = Hurst.hurst(ts)</p>

<p>Tip: ts has to be object list(n_samples,) or np.array(n_samples,)</p>

<blockquote>
  <p><strong>Author</strong> = “Blank Seraph”</p>
</blockquote>

<blockquote>
  <p>import numpy as np</p>
</blockquote>

<blockquote>
  <p>import pandas as pd</p>
</blockquote>

<blockquote>
  <p>import  csv</p>
</blockquote>

<blockquote>
  <p>def hurst(ts):</p>
</blockquote>

<blockquote>
  <p>N = len(ts)
   print(N)
  if N &lt; 20:</p>
</blockquote>

<blockquote>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> raise ValueError("Time series is too short! input series ought to have at least 20 samples!")
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>max_k = int(np.floor(N/2))
 R_S_dict = []
for k in range(10,max_k+1):</p>
</blockquote>

<blockquote>
  <p>R,S = 0,0
  # split ts into subsets
 subset_list = [ts[i:i+k] for i in range(0,N,k)]</p>
</blockquote>

<blockquote>
  <p>if np.mod(N,k)&gt;0:
   subset_list.pop()
  #tail = subset_list.pop()
 #subset_list[-1].extend(tail)
       # calc mean of every subset
      mean_list=[np.mean(x) for x in subset_list]</p>
</blockquote>

<blockquote>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> for i in range(len(subset_list)):
    cumsum_list = pd.Series(subset_list[i]-mean_list[i]).cumsum()
   R += max(cumsum_list)-min(cumsum_list)
  S += np.std(subset_list[i])
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>R_S_dict.append({“R”:R/len(subset_list),”S”:S/len(subset_list),”n”:k})</p>
</blockquote>

<blockquote>
  <p>log_R_S = []
  log_n = []
 # print(R_S_dict)</p>
</blockquote>

<blockquote>
  <p>for i in range(len(R_S_dict)):
   R_S = (R_S_dict[i][“R”]+np.spacing(1)) / (R_S_dict[i][“S”]+np.spacing(1))
  log_R_S.append(np.log(R_S))</p>
</blockquote>

<blockquote>
  <p>log_n.append(np.log(R_S_dict[i][“n”]))
  Hurst_exponent = np.polyfit(log_n,log_R_S,1)[0]
 print(Hurst_exponent)
return Hurst_exponent</p>
</blockquote>

<blockquote>
  <p>if <strong>name</strong> == ‘<strong>main</strong>’:
ts = list()</p>
</blockquote>

<blockquote>
  <p>with open(‘C:/Users/13760/Desktop/hurst.csv’, mode=’r’, encoding=’utf-8’) as infile:
read = csv.reader(infile)
for line in read:
  ts.append(line[1])</p>
</blockquote>

<blockquote>
  <p># print(ts)</p>
</blockquote>

<blockquote>
  <p>N = len(ts)
ts = np.array(ts)
ts = ts.astype(np.float)</p>
</blockquote>

<blockquote>
  <p>hurst(ts)</p>
</blockquote>

:ET